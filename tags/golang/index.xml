<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Periferia Binaria</title>
    <link>https://blog.bitclvx.com/tags/golang/</link>
    <description>Recent content in golang on Periferia Binaria</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.bitclvx.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Modules</title>
      <link>https://blog.bitclvx.com/post/al-service-modules/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bitclvx.com/post/al-service-modules/</guid>
      <description>go modules ayuda a manejar tus dependencias de golang.
Proyecto Es un repositorio de código. Algunas veces estos proyectos pueden contener paquetes que ayudan a construir otros programas. Otras veces son aplicaciones que producen un binario. Un proyecto puede manejar más de una aplicación o más de un paquete.
El proyecto ayuda a definir el diseño, estándares y consistencia del proyecto para todo el equipo lo cual implica que todos los miembros sigan los mismos objetivos.</description>
    </item>
    
    <item>
      <title>Golang Context</title>
      <link>https://blog.bitclvx.com/post/golang-context/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bitclvx.com/post/golang-context/</guid>
      <description>Checking about how to cancel requests I stepped onto the context package in golang.
 Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.
 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;- chan struct{} Err() error Value(key interface{}) interface{} } Context allows to cancel any work that is being done using timeouts or by external signals.</description>
    </item>
    
    <item>
      <title>Golang HTTP Handlers</title>
      <link>https://blog.bitclvx.com/post/golang-handler/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bitclvx.com/post/golang-handler/</guid>
      <description>To process HTTP requests in golang, you need a way to handle different routes, and a actual handler to process the requests. ServeMux and the Handler interface do exactly that.
Handler Interface Golang provides the http.Handler interface to respond to HTTP requests in the net/http package. This interface only requires you to implement ServeHTTP(ResponseWriter, *Request).
type Handler interface { ServeHTTP(ResponseWriter, *Request) }  In addition, the http.HandlerFunc type is an adapter to allow the use of ordinary functions as HTTP handlers.</description>
    </item>
    
  </channel>
</rss>
