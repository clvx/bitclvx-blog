<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Periferia Binaria</title>
    <link>https://blog.bitclvx.com/tags/golang/</link>
    <description>Recent content in golang on Periferia Binaria</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.bitclvx.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang HTTP Handlers</title>
      <link>https://blog.bitclvx.com/post/golang-handler/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bitclvx.com/post/golang-handler/</guid>
      <description>To process HTTP requests in golang, you need a way to handle different routes, and a actual handler to process the requests. ServeMux and the Handler interface do exactly that.
Handler Interface Golang provides the http.Handler interface to respond to HTTP requests in the net/http package. This interface only requires you to implement ServeHTTP(ResponseWriter, *Request).
type Handler interface { ServeHTTP(ResponseWriter, *Request) }  In addition, the http.HandlerFunc type is an adapter to allow the use of ordinary functions as HTTP handlers.</description>
    </item>
    
  </channel>
</rss>